AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless API con API Gateway, Lambda y DynamoDB para gesti√≥n de productos

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name

Globals:
  Function:
    Runtime: nodejs16.x
    Timeout: 10
    MemorySize: 256
    Environment:
      Variables:
        PRODUCTS_TABLE: !Ref ProductsTable

Resources:
  # DynamoDB Table
  ProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-products-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      SSESpecification:
        SSEEnabled: true

  # Lambda Functions
  GetProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-product-${Environment}"
      CodeUri: ./src/
      Handler: getProduct.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ProductsTable
      Events:
        GetProduct:
          Type: Api
          Properties:
            Path: /products/{id}
            Method: get

  GetProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-products-${Environment}"
      CodeUri: ./src/
      Handler: getProducts.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ProductsTable
      Events:
        GetProducts:
          Type: Api
          Properties:
            Path: /products
            Method: get

  CreateProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-create-product-${Environment}"
      CodeUri: ./src/
      Handler: createProduct.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductsTable
      Events:
        CreateProduct:
          Type: Api
          Properties:
            Path: /products
            Method: post

  UpdateProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-update-product-${Environment}"
      CodeUri: ./src/
      Handler: updateProduct.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductsTable
      Events:
        UpdateProduct:
          Type: Api
          Properties:
            Path: /products/{id}
            Method: put

  DeleteProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-delete-product-${Environment}"
      CodeUri: ./src/
      Handler: deleteProduct.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductsTable
      Events:
        DeleteProduct:
          Type: Api
          Properties:
            Path: /products/{id}
            Method: delete

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"
  
  ProductsTable:
    Description: "DynamoDB Products table name"
    Value: !Ref ProductsTable
    Export:
      Name: !Sub "${AWS::StackName}-ProductsTable"

  StackInfo:
    Description: "Stack identifier information"
    Value: !Sub "${AWS::StackName}-${Environment}-${AWS::Region}"